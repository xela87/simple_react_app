{"version":3,"sources":["store/customerReducer.ts","asyncActions/customers.ts","App.tsx","store/cashReducer.ts","store/store.ts","index.tsx"],"names":["ADD_CUSTOMER","ADD_MANY_CUSTOMERS","REMOVE_CUSTOMER","initialState","customers","fetchCustomers","dispatch","fetch","then","response","json","type","payload","App","useDispatch","cash","useSelector","state","addCustomer","name","customer","id","Date","now","deleteCustomer","className","onClick","addCash","Number","prompt","getCash","length","map","ADD_CASH","GET_CASH","rootReducer","combineReducers","action","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAMA,EAAe,eACfC,EAAqB,qBACrBC,EAAkB,kBAIlBC,EAAe,CACnBC,UAAW,CAAC,KCLDC,EAAiB,WAC5B,OAAO,SAACC,GACNC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIJ,EDkBqC,CAACK,KAAMV,EAAoBW,QClBhCF,S,OC8CrCG,MA5Cf,WACE,IAAMP,EAAWQ,cACXC,EAAOC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,KAAKA,QACpDX,EAAYY,aAAY,SAACC,GAAD,OAAsBA,EAAMb,UAAUA,aAS9Dc,EAAc,SAACC,GACnB,IAAMC,EAAW,CACfD,KAAMA,EACNE,GAAIC,KAAKC,OAEXjB,EFFgD,CAACK,KAAMX,EAAcY,QEE1CQ,KAEvBI,EAAiB,SAACJ,GFFU,IAACR,EEGjCN,GFHiCM,EEGHQ,EAASC,GFHY,CAACV,KAAMT,EAAiBU,cEM7E,OACE,sBAAKa,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BV,EAA3B,QACA,sBAAKU,UAAU,UAAf,UACE,wBAAQA,UAAU,MAAMC,QAAS,kBAtBvB,SAACX,GACfT,EAAS,CAACK,KAAM,WAAYC,QAASG,IAqBMY,CAAQC,OAAOC,YAAtD,+GACA,wBAAQJ,UAAU,MAAMC,QAAS,kBApBvB,SAACX,GACfT,EAAS,CAACK,KAAM,WAAYC,QAASG,IAmBMe,CAAQF,OAAOC,YAAtD,8FACA,wBAAQJ,UAAU,MAAMC,QAAS,kBAAMR,EAAYW,WAAnD,6FACA,wBAAQJ,UAAU,MAAMC,QAAS,kBAAMpB,EAASD,MAAhD,4IAEDD,EAAU2B,OAAS,EAClB,qBAAKN,UAAU,WAAf,SACGrB,EAAU4B,KAAI,SAACZ,GAAD,OAA4C,qBAAKK,UAAU,WAAWC,QAAS,kBAAMF,EAAeJ,IAAxD,SAAoEA,EAASD,YAG1I,qBAAKM,UAAU,WAAf,6G,OC7CFQ,EAAW,WACXC,EAAW,WAEX/B,EAAe,CACnBY,KAAM,I,gBCIFoB,EAAcC,0BAAgB,CAClCrB,KDFyB,WAAoE,IAAnEE,EAAkE,uDAA1Dd,EAAckC,EAA4C,uCAC5F,OAAQA,EAAO1B,MACb,KAAKsB,EACH,OAAO,2BAAIhB,GAAX,IAAkBF,KAAME,EAAMF,KAAOsB,EAAOzB,UAC9C,KAAKsB,EACH,OAAO,2BAAIjB,GAAX,IAAkBF,KAAME,EAAMF,KAAOsB,EAAOzB,UAC9C,QAAS,OAAOK,ICHlBb,UJA6B,WAAiE,IAAhEa,EAA+D,uDAAvDd,EAAckC,EAAyC,uCAC7F,OAAQA,EAAO1B,MACb,KAAKX,EACH,OAAO,2BAAIiB,GAAX,IAAkBb,UAAU,GAAD,mBAAMa,EAAMb,WAAZ,CAAuBiC,EAAOzB,YAC3D,KAAKV,EAEH,OAAO,2BAAIe,GAAX,IAAkBb,UAAWa,EAAMb,UAAUkC,QAAO,SAAAlB,GAAQ,OAAIA,EAASC,KAAOgB,EAAOzB,aACzF,KAAKX,EACH,OAAO,2BAAIgB,GAAX,IAAkBb,UAAU,GAAD,mBAAMa,EAAMb,WAAZ,YAA0BiC,EAAOzB,YAC9D,QAAS,OAAOK,MINPsB,EAAQC,sBAAYL,EAAaM,8BAAoBC,0BAAgBC,OCNlFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.02df3198.chunk.js","sourcesContent":["const ADD_CUSTOMER = 'ADD_CUSTOMER'\r\nconst ADD_MANY_CUSTOMERS = 'ADD_MANY_CUSTOMERS'\r\nconst REMOVE_CUSTOMER = 'REMOVE_CUSTOMER'\r\n\r\n\r\n\r\nconst initialState = {\r\n  customers: [{}]\r\n}\r\n\r\nexport const customerReducer = (state = initialState, action: {type: string, payload: any}) => {\r\n  switch (action.type){\r\n    case ADD_CUSTOMER:\r\n      return {...state, customers: [...state.customers, action.payload]}\r\n    case REMOVE_CUSTOMER:\r\n      // @ts-ignore\r\n      return {...state, customers: state.customers.filter(customer => customer.id !== action.payload)}\r\n    case ADD_MANY_CUSTOMERS:\r\n      return {...state, customers: [...state.customers, ...action.payload]}\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport const addCustomerAction = (payload: any) => ({type: ADD_CUSTOMER, payload})\r\nexport const addManyCustomersAction = (payload: any) => ({type: ADD_MANY_CUSTOMERS, payload})\r\nexport const removeCustomerAction = (payload: any) => ({type: REMOVE_CUSTOMER, payload})\r\n","import {addManyCustomersAction} from '../store/customerReducer';\r\n\r\nexport const fetchCustomers = () => {\r\n  return (dispatch: any) => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(json => dispatch(addManyCustomersAction(json)))\r\n  }\r\n\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RootState} from './store/store';\nimport {addCustomerAction, removeCustomerAction} from './store/customerReducer';\nimport { fetchCustomers } from './asyncActions/customers';\n\n\nfunction App() {\n  const dispatch = useDispatch()\n  const cash = useSelector((state: RootState) => state.cash.cash)\n  const customers = useSelector((state: RootState) => state.customers.customers)\n\n  const addCash = (cash: number) => {\n    dispatch({type: 'ADD_CASH', payload: cash})\n  }\n  const getCash = (cash: number) => {\n    dispatch({type: 'GET_CASH', payload: cash})\n  }\n\n  const addCustomer = (name: string|null) => {\n    const customer = {\n      name: name,\n      id: Date.now(),\n    }\n    dispatch(addCustomerAction(customer))\n  }\n  const deleteCustomer = (customer: { name?: any; id?: number }) => {\n    dispatch(removeCustomerAction(customer.id))\n  }\n\n  return (\n    <div className='container'>\n      <div className=\"cashView\">{cash} $</div>\n      <div className=\"content\" >\n        <button className=\"btn\" onClick={() => addCash(Number(prompt()))}>Поповнити рахунок</button>\n        <button className=\"btn\" onClick={() => getCash(Number(prompt()))}>Зняти з рахунка</button>\n        <button className=\"btn\" onClick={() => addCustomer(prompt())}>Додати клієнта</button>\n        <button className=\"btn\" onClick={() => dispatch(fetchCustomers())}>Отримати клієнтів із БД</button>\n      </div>\n      {customers.length > 1 ?\n        <div className=\"customer\">\n          {customers.map((customer: { name?: any; id?: number; }) => <div className=\"customer\" onClick={() => deleteCustomer(customer)}>{customer.name}</div>)}\n        </div>\n        :\n        <div className=\"customer\">\n          Клієнти відсутні\n        </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const ADD_CASH = 'ADD_CASH'\r\nconst GET_CASH = 'GET_CASH'\r\n\r\nconst initialState = {\r\n  cash: 50,\r\n}\r\n\r\nexport const cashReducer = (state = initialState, action: {type: string, payload: number}) => {\r\n  switch (action.type){\r\n    case ADD_CASH:\r\n      return {...state, cash: state.cash + action.payload}\r\n    case GET_CASH:\r\n      return {...state, cash: state.cash - action.payload}\r\n    default: return state\r\n  }\r\n}\r\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport {cashReducer} from './cashReducer';\r\nimport {customerReducer} from './customerReducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n  cash: cashReducer,\r\n  customers: customerReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}